%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - ha
scope: source.hare

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'
  nondigit: '[a-zA-Z_]'
  identifier: '{{nondigit}}{{dec_digit|nondigit}}*'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: use_keyword
    - include: numbers
    - include: characters
    - include: strings
    - include: strings_2
    - include: single_quote_string
    - include: operators


  keywords:
    # Keywords are if, else for and while.
    # Note that backslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(abort|align|alloc|append|as|assert|bool|break|case|char|const|continue|def|defer|delete|else|enum|export|f32|f64|false|fn|for|free|i16|i32|i64|i8|if|int|is|len|let|match|never|null|nullable|offset|return|rune|size|static|str|struct|switch|true|type|u16|u32|u64|u8|uint|uintptr|union|vaarg|vaend|valist|vastart|void|_|yield)\b'
      scope: keyword.control.hare
    - match: '(@[a-z]+)'
      scope: keyword.attribute.hare


  use_keyword:
    - match: '\buse\b'
      scope: keyword.control.use.hare
      push:
        - match: ' \b[a-zA-Z]*\b'
          scope: meta.preprocessor.hare
        - match: ';'
          scope: keyword.control.endident.hare
          pop: true


  numbers:
    # float
    - match: '\b(\+|-)?[0-9]+\.[0-9]+((e|E)?(\+|-)?[0-9]+)(f32|f64)?'
      scope: constant.numeric.hare
    # float second
    - match: '\b(\+|-)?[0-9]((e|E)(\+|-)?[0-9]+)?(f32|f64)?\b'
      scope: constant.numeric.hare
    # decimal
    - match: '\b(-)?[0-9.]+(i64|i32|i16|i8|u64|u32|u16|u8|i|u|z)?\b'
      scope: constant.numeric.hare
    # hex digits
    - match: '\b(0[x])({{hex_digit}}*)(i64|i32|i16|i8|u64|u32|u16|u8|i|u|z)?\b'
      scope: constant.numeric.hare
    # binary
    - match: '\b(0[b])({{bin_digit}}*)(i64|i32|i16|i8|u64|u32|u16|u8|i|u|z)?\b'
      scope: constant.numeric.hare
    # octet
    - match: '\b(0[o])({{oct_digit}}*)(i64|i32|i16|i8|u64|u32|u16|u8|i|u|z)?\b'
      scope: constant.numeric.hare

  characters:
    - match: '''([^''\\]|\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'''
      scope: string.quoted.single.hare

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.hare
      push:
        - meta_scope: string.quoted.double.hare
          meta_include_prototype: false
        - match: '"'
          scope: punctuation.definition.string.end.hare
          pop: true
        - match: \\(0|a|b|f|n|r|t|v|\\|\'|\"|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})
          scope: constant.character.escape.hare
        - match: '\{\{|\}\}'
          scope: constant.character.format.hare
        - match: '{([0-9]*(:([0\-\+\=\_\ ]*(\.)?[0-9]*(x|X|o|b)?(\.[0-9]*)?|[efgFs\.UES2]*))?|[0-9]*%[0-9]*)}'
          scope: constant.character.format.hare

  strings_2:
    - match: "`"
      scope: punctuation.definition.string.begin.hare
      push:
        - meta_scope: string.quoted.double.hare
          meta_include_prototype: false
        - match: '`'
          scope: punctuation.definition.string.end.hare
          pop: true
        - match: '\{\{|\}\}'
          scope: constant.character.format.hare
        - match: '{([0-9]*(:([0\-\+\=\_\ ]*(\.)?[0-9]*(x|X|o|b)?(\.[0-9]*)?|[efgFs\.UES2]*))?|[0-9]*%[0-9]*)}'
          scope: constant.character.format.hare


  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.hare
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.hare
        - match: $\n?
          pop: true

  operators:
    # operators
    - match: <<|>>
      scope: keyword.operator.arithmetic.hare
    - match: \=|\+\=|-\=|\*\=|/\=|%\=|<<\=|>>\=|&\=|\|\=|\^\=|&&\=|\|\|\=|\^\^\=
      scope: keyword.operator.assignment.augmented.c
    - match: \+|\-|~|!|\*|&|/|%|\^
      scope: keyword.operator.arithmetic.hare
    - match: <|>|<\=|>\=|\=\=|\!\=
      scope: keyword.operator.comparison.c
    - match: \=>|::|:|\?|!|\||\.\.\.|\.\.
      scope: keyword.operator.misc.hare
